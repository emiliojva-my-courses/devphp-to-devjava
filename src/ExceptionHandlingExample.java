import java.io.*;
import java.util.*;

/**
 * üö® Exception Handling: PHP vs Java
 * 
 * Este exemplo mostra como lidar com erros e exce√ß√µes em Java,
 * sempre comparando com try/catch do PHP que voc√™ j√° conhece.
 * 
 * T√≥picos: Checked vs Unchecked, Custom Exceptions, Try-with-resources
 */

// ==========================================
// 1. CUSTOM EXCEPTIONS (PHP Exception)
// ==========================================

/**
 * üî¥ EXCEPTION CUSTOMIZADA: Como PHP Exception
 * 
 * PHP: class MinhaException extends Exception { ... }
 * Java: class MinhaException extends Exception { ... }
 */
class UsuarioInvalidoException extends Exception {
    private String campo;
    private Object valor;
    
    public UsuarioInvalidoException(String campo, Object valor, String mensagem) {
        super(mensagem);
        this.campo = campo;
        this.valor = valor;
    }
    
    public String getCampo() { return campo; }
    public Object getValor() { return valor; }
    
    @Override
    public String getMessage() {
        return String.format("‚ùå Campo '%s' inv√°lido (valor: %s): %s", campo, valor, super.getMessage());
    }
}

/**
 * üü† RUNTIME EXCEPTION: Para erros de l√≥gica
 */
class SaldoInsuficienteException extends RuntimeException {
    private double saldoAtual;
    private double valorSaque;
    
    public SaldoInsuficienteException(double saldoAtual, double valorSaque) {
        super(String.format("Saldo insuficiente: R$ %.2f (tentativa: R$ %.2f)", saldoAtual, valorSaque));
        this.saldoAtual = saldoAtual;
        this.valorSaque = valorSaque;
    }
    
    public double getSaldoAtual() { return saldoAtual; }
    public double getValorSaque() { return valorSaque; }
}

// ==========================================
// 2. CLASSE DE EXEMPLO (Simulando opera√ß√µes que podem falhar)
// ==========================================

/**
 * üí≥ CONTA BANC√ÅRIA: Para demonstrar exceptions
 */
class ContaBancaria {
    private String titular;
    private double saldo;
    
    public ContaBancaria(String titular, double saldoInicial) throws UsuarioInvalidoException {
        // Valida√ß√£o que pode lan√ßar exception
        if (titular == null || titular.trim().isEmpty()) {
            throw new UsuarioInvalidoException("titular", titular, "Nome do titular √© obrigat√≥rio");
        }
        if (saldoInicial < 0) {
            throw new UsuarioInvalidoException("saldoInicial", saldoInicial, "Saldo inicial n√£o pode ser negativo");
        }
        
        this.titular = titular;
        this.saldo = saldoInicial;
    }
    
    public void sacar(double valor) {
        if (valor > saldo) {
            throw new SaldoInsuficienteException(saldo, valor);
        }
        saldo -= valor;
        System.out.println(String.format("‚úÖ Saque realizado: R$ %.2f (saldo: R$ %.2f)", valor, saldo));
    }
    
    public void depositar(double valor) throws UsuarioInvalidoException {
        if (valor <= 0) {
            throw new UsuarioInvalidoException("valor", valor, "Valor do dep√≥sito deve ser positivo");
        }
        saldo += valor;
        System.out.println(String.format("‚úÖ Dep√≥sito realizado: R$ %.2f (saldo: R$ %.2f)", valor, saldo));
    }
    
    // M√©todo que pode falhar ao acessar arquivo (IOException)
    public void salvarExtrato(String nomeArquivo) throws IOException {
        // Simula opera√ß√£o que pode falhar
        if (nomeArquivo.contains("*")) {
            throw new IOException("Nome de arquivo inv√°lido: " + nomeArquivo);
        }
        
        // N√£o vamos realmente criar arquivo, s√≥ simular
        System.out.println("üìÑ Extrato salvo em: " + nomeArquivo);
    }
    
    public String getTitular() { return titular; }
    public double getSaldo() { return saldo; }
}

// ==========================================
// 3. SERVI√áO BANC√ÅRIO (Demonstrando diferentes tipos de exceptions)
// ==========================================

class ServicoBancario {
    
    /**
     * üè¶ CRIAR CONTA: Pode lan√ßar checked exception
     */
    public ContaBancaria criarConta(String titular, double saldoInicial) throws UsuarioInvalidoException {
        System.out.println("üè¶ Criando conta para: " + titular);
        return new ContaBancaria(titular, saldoInicial);
    }
    
    /**
     * üí∞ TRANSFER√äNCIA: M√∫ltiplas exceptions poss√≠veis
     */
    public void transferir(ContaBancaria origem, ContaBancaria destino, double valor) 
            throws UsuarioInvalidoException {
        
        System.out.println(String.format("üîÑ Transferindo R$ %.2f de %s para %s", 
                                        valor, origem.getTitular(), destino.getTitular()));
        
        // Pode lan√ßar SaldoInsuficienteException (unchecked)
        origem.sacar(valor);
        
        // Pode lan√ßar UsuarioInvalidoException (checked)
        destino.depositar(valor);
        
        System.out.println("‚úÖ Transfer√™ncia conclu√≠da!");
    }
    
    /**
     * üìä RELAT√ìRIO: Try-with-resources (como PHP finally)
     */
    public void gerarRelatorio(List<ContaBancaria> contas) {
        System.out.println("üìä Gerando relat√≥rio de contas...");
        
        // Try-with-resources (fecha automaticamente)
        try (Scanner scanner = new Scanner(System.in)) {
            
            for (ContaBancaria conta : contas) {
                System.out.println(String.format("‚Ä¢ %s: R$ %.2f", 
                                                conta.getTitular(), conta.getSaldo()));
                
                // Simula tentativa de salvar (pode falhar)
                try {
                    String nomeArquivo = "extrato_" + conta.getTitular().toLowerCase() + ".txt";
                    conta.salvarExtrato(nomeArquivo);
                } catch (IOException e) {
                    System.out.println("‚ö†Ô∏è Erro ao salvar extrato: " + e.getMessage());
                }
            }
            
        } // Scanner √© fechado automaticamente aqui
        
        System.out.println("üìä Relat√≥rio conclu√≠do!");
    }
}

// ==========================================
// 4. CLASSE PRINCIPAL COM DEMONSTRA√á√ïES
// ==========================================

public class ExceptionHandlingExample {
    
    public static void main(String[] args) {
        System.out.println("========================================");
        System.out.println("üö® EXCEPTION HANDLING: PHP ‚Üí JAVA");
        System.out.println("========================================\n");
        
        ServicoBancario servico = new ServicoBancario();
        
        demonstrarCheckedExceptions(servico);
        demonstrarUncheckedExceptions(servico);
        demonstrarMultiplasExceptions(servico);
        demonstrarTryWithResources(servico);
        demonstrarBestPractices();
    }
    
    /**
     * ‚úÖ CHECKED EXCEPTIONS: Obrigat√≥rio tratar
     */
    private static void demonstrarCheckedExceptions(ServicoBancario servico) {
        System.out.println("‚úÖ 1. CHECKED EXCEPTIONS (obrigat√≥rio tratar)");
        System.out.println("PHP: try { ... } catch (Exception $e) { ... }");
        System.out.println("Java: try { ... } catch (UsuarioInvalidoException e) { ... }\n");
        
        try {
            // Tentativa 1: Dados v√°lidos
            ContaBancaria conta1 = servico.criarConta("Jo√£o Silva", 1000.0);
            System.out.println("‚úÖ Conta criada: " + conta1.getTitular());
            
            // Tentativa 2: Nome inv√°lido (vai dar erro)
            ContaBancaria conta2 = servico.criarConta("", 500.0);
            
        } catch (UsuarioInvalidoException e) {
            System.out.println("üî¥ Erro capturado: " + e.getMessage());
            System.out.println("   Campo: " + e.getCampo());
            System.out.println("   Valor: " + e.getValor());
        }
        
        System.out.println();
    }
    
    /**
     * üî• UNCHECKED EXCEPTIONS: Podem ou n√£o ser tratadas
     */
    private static void demonstrarUncheckedExceptions(ServicoBancario servico) {
        System.out.println("üî• 2. UNCHECKED EXCEPTIONS (RuntimeException)");
        System.out.println("PHP: Pode capturar ou deixar 'explodir'");
        System.out.println("Java: Pode capturar ou deixar 'explodir'\n");
        
        try {
            ContaBancaria conta = servico.criarConta("Maria Santos", 100.0);
            
            // Tentativa de saque v√°lido
            conta.sacar(50.0);
            
            // Tentativa de saque inv√°lido (vai dar erro)
            conta.sacar(200.0);
            
        } catch (UsuarioInvalidoException e) {
            System.out.println("üî¥ Erro ao criar conta: " + e.getMessage());
        } catch (SaldoInsuficienteException e) {
            System.out.println("üî¥ Erro no saque: " + e.getMessage());
            System.out.println("   Saldo atual: R$ " + String.format("%.2f", e.getSaldoAtual()));
            System.out.println("   Tentativa: R$ " + String.format("%.2f", e.getValorSaque()));
        }
        
        System.out.println();
    }
    
    /**
     * üéØ M√öLTIPLAS EXCEPTIONS: Hierarquia de catch
     */
    private static void demonstrarMultiplasExceptions(ServicoBancario servico) {
        System.out.println("üéØ 3. M√öLTIPLAS EXCEPTIONS (catch hierarchy)");
        System.out.println("PHP: catch (Exception $e) pega todas");
        System.out.println("Java: Ordem espec√≠fica ‚Üí geral\n");
        
        try {
            ContaBancaria origem = servico.criarConta("Pedro", 300.0);
            ContaBancaria destino = servico.criarConta("Ana", 200.0);
            
            // Transfer√™ncia v√°lida
            servico.transferir(origem, destino, 100.0);
            
            // Transfer√™ncia inv√°lida (saldo insuficiente)
            servico.transferir(origem, destino, 500.0);
            
        } catch (SaldoInsuficienteException e) {
            // Mais espec√≠fica primeiro
            System.out.println("üî¥ Saldo insuficiente: " + e.getMessage());
        } catch (UsuarioInvalidoException e) {
            // Menos espec√≠fica depois
            System.out.println("üî¥ Dados inv√°lidos: " + e.getMessage());
        } catch (Exception e) {
            // Mais geral por √∫ltimo
            System.out.println("üî¥ Erro inesperado: " + e.getMessage());
        } finally {
            // PHP: finally { ... }
            // Java: finally { ... }
            System.out.println("üîß Limpeza sempre executada (finally)");
        }
        
        System.out.println();
    }
    
    /**
     * üîÑ TRY-WITH-RESOURCES: Auto-close (como PHP finally para recursos)
     */
    private static void demonstrarTryWithResources(ServicoBancario servico) {
        System.out.println("üîÑ 4. TRY-WITH-RESOURCES (auto-close)");
        System.out.println("PHP: finally { fclose($file); }");
        System.out.println("Java: try (Resource r = ...) { } // auto-close\n");
        
        List<ContaBancaria> contas = new ArrayList<>();
        
        try {
            contas.add(servico.criarConta("Cliente 1", 1000.0));
            contas.add(servico.criarConta("Cliente 2", 2000.0));
            contas.add(servico.criarConta("Cliente*Inv√°lido", 500.0)); // Nome com * vai dar erro no arquivo
            
            servico.gerarRelatorio(contas);
            
        } catch (UsuarioInvalidoException e) {
            System.out.println("üî¥ Erro ao criar conta: " + e.getMessage());
        }
        
        System.out.println();
    }
    
    /**
     * üéØ BEST PRACTICES: Dicas importantes
     */
    private static void demonstrarBestPractices() {
        System.out.println("üéØ 5. BEST PRACTICES (dicas importantes)");
        
        System.out.println("\nüìã REGRAS DE OURO:");
        System.out.println("1. üéØ Catch espec√≠fico antes do gen√©rico");
        System.out.println("2. üí¨ Messages descritivas (n√£o s√≥ \"erro\")");
        System.out.println("3. üîç Log exceptions importantes");
        System.out.println("4. üßπ Use try-with-resources para recursos");
        System.out.println("5. ‚ö° RuntimeException para erros de l√≥gica");
        System.out.println("6. ‚úÖ Checked Exception para erros recuper√°veis");
        
        System.out.println("\nüìä COMPARA√á√ÉO FINAL:");
        System.out.println("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê");
        System.out.println("‚îÇ        Aspecto      ‚îÇ         PHP         ‚îÇ        Java         ‚îÇ");
        System.out.println("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§");
        System.out.println("‚îÇ Exception Base      ‚îÇ Exception           ‚îÇ Exception           ‚îÇ");
        System.out.println("‚îÇ Runtime Errors      ‚îÇ Error (PHP 7+)      ‚îÇ RuntimeException    ‚îÇ");
        System.out.println("‚îÇ Try/Catch           ‚îÇ try/catch/finally   ‚îÇ try/catch/finally   ‚îÇ");
        System.out.println("‚îÇ Custom Exception    ‚îÇ extends Exception   ‚îÇ extends Exception   ‚îÇ");
        System.out.println("‚îÇ Auto-cleanup        ‚îÇ finally block       ‚îÇ try-with-resources  ‚îÇ");
        System.out.println("‚îÇ Obrigat√≥rio tratar  ‚îÇ N√£o                 ‚îÇ Checked Exceptions  ‚îÇ");
        System.out.println("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò");
        
        System.out.println("\nüéâ Exception Handling dominado! Pr√≥ximo: Spring Boot pr√°tico!");
    }
}
